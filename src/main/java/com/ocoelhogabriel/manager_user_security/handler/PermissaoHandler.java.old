package com.ocoelhogabriel.manager_user_security.handler;

import java.util.Objects;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;

import com.ocoelhogabriel.manager_user_security.application.services.PerfilPermissaoService;
import com.ocoelhogabriel.manager_user_security.application.use_cases.URLValidator;
import com.ocoelhogabriel.manager_user_security.domain.constraints.MessageConstraints;
import com.ocoelhogabriel.manager_user_security.domain.constraints.MessageFormatterUtil;
import com.ocoelhogabriel.manager_user_security.domain.value_objects.RecursoMapEnum;

/**
 * Manipulador de verificação de permissões para acesso a recursos
 * Valida se um perfil tem permissão para acessar determinado recurso com determinado método HTTP
 */
@Configuration
public class PermissaoHandler {

	private static final Logger LOGGER = LoggerFactory.getLogger(PermissaoHandler.class);

	private final PerfilPermissaoService perfilPermissaoService;
	
	public PermissaoHandler(PerfilPermissaoService perfilPermissaoService) {
		this.perfilPermissaoService = perfilPermissaoService;
	}

	/**
	 * Verifica se um perfil tem permissão para acessar um recurso com determinado método HTTP
	 * 
	 * @param perfil O ID do perfil a ser verificado
	 * @param urlValidator O validador de URL que contém informações sobre o recurso
	 * @param method O método HTTP (GET, POST, PUT, DELETE, etc.)
	 * @return true se o perfil tem permissão, false caso contrário
	 */
	public boolean checkPermission(String perfil, URLValidator urlValidator, String method) {
		Objects.requireNonNull(perfil, MessageFormatterUtil.format(MessageConstraints.PERMISSION_NULL_PROFILE));
		Objects.requireNonNull(urlValidator, MessageFormatterUtil.format(MessageConstraints.PERMISSION_NULL_URL_VALIDATOR));
		Objects.requireNonNull(method, MessageFormatterUtil.format(MessageConstraints.PERMISSION_NULL_HTTP_METHOD));
		
		// Verifica se o recurso é válido
		RecursoMapEnum recurso = urlValidator.getRecursoMapEnum();
		if (recurso == null) {
			if (LOGGER.isWarnEnabled()) {
				LOGGER.warn(MessageFormatterUtil.format(MessageConstraints.PERMISSION_RESOURCE_NOT_RECOGNIZED, 
					urlValidator.getMessage()));
			}
			return false;
		}

		// Verifica se o perfil existe
		var perfilEntity = perfilPermissaoService.findByIdPerfilEntity(perfil);
		if (perfilEntity == null) {
			if (LOGGER.isWarnEnabled()) {
				LOGGER.warn(MessageFormatterUtil.format(MessageConstraints.PERMISSION_PROFILE_NOT_FOUND, perfil));
			}
			return false;
		}
		
		// Para esta implementação simplificada, assumimos que se o perfil existe, ele tem permissão
		// Em uma implementação completa, buscaríamos as permissões específicas do perfil
		// para o recurso e verificaríamos de acordo com o método HTTP
		
		// Mapeia o método HTTP para o tipo de ação
		String acaoTipo = mapHttpMethodToAction(method);
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug(MessageFormatterUtil.format(MessageConstraints.PERMISSION_CHECK_FOR_URL, 
				perfil, recurso.getNome(), acaoTipo));
		}
		
		// Implementação simplificada: se o perfil existe, tem permissão
		// Em uma implementação real, verificaríamos as permissões específicas
		
		// Nesta implementação simplificada, sempre autorizamos o acesso
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug(MessageFormatterUtil.format(MessageConstraints.PERMISSION_ACCESS_GRANTED, 
				perfil, recurso.getNome(), method));
		}
		
		return true;
	}
	
	/**
	 * Mapeia o método HTTP para o tipo de ação na permissão
	 * 
	 * @param httpMethod O método HTTP
	 * @return O tipo de ação correspondente
	 */
	private String mapHttpMethodToAction(String httpMethod) {
		if (httpMethod == null) {
			return "";
		}
		
		return switch (httpMethod.toUpperCase()) {
			case "GET" -> "listar";  // listar ou buscar dependendo do contexto
			case "POST" -> "criar";
			case "PUT", "PATCH" -> "alterar";
			case "DELETE" -> "excluir";
			default -> "";
		};
	}
	
	// Método removido por não ser utilizado na implementação atual
}
